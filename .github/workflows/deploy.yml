name: Release

on:
  release:
    types:
      - created

env:
  NODE_VERSION: '16.x'

jobs:
  app:
    name: App Build

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: |
          cd website/docusaurus-search-local
          yarn install --frozen-lockfile
          yarn build
          cd ../
          mkdir download
          yarn install --frozen-lockfile

      - name: Linux/Mac App Build & Copy to website/download
        if: matrix.os != 'windows-latest'
        run: |
          cd website
          GH_TOKEN=${{secrets.GITHUB_TOKEN}} npm run app-build
          mv dist/*.zip dist/*.dmg dist/*.deb dist/*.AppImage download || true

      - name: Windows App Build & Copy to website/download
        if: matrix.os == 'windows-latest'
        run: |
          cd website
          yarn run app-build
          mv dist/*.exe download
          mv dist/*.zip download
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.os}}
          path: website/download
          
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "website/download/**"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  pdf:
    name: PDF

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: PDF Docker Build
        run: |
          docker compose run pdf
          mkdir website/download
          mv parse/output/*.pdf website/download

      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: 'PDF'
          path: website/download
            
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "website/download/**"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  prismpdf:
    name: Prism PDF

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Prism PDF Docker Build
        run: |
          docker compose run prismpdf
          mkdir website/download
          mv parse/output/*.pdf website/download

      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: 'Prism PDF'
          path: website/download
            
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "website/download/**"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  web:
    name: Web Build and Deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: yarn install, build, and test
      run: |
        cd website/docusaurus-search-local
        yarn install --frozen-lockfile
        yarn build
        cd ../
        yarn install --frozen-lockfile
        yarn run download
        yarn run build
        yarn run test
    - name: Deploy
      if: ${{ false }}
      uses: Pendect/action-rsyncer@v2.0.0
      env:
        DEPLOY_KEY: ${{secrets.DEPLOY_KEY}}
      with:
        flags: '-avzr --delete'
        options: ''
        ssh_options: ''
        src: 'website/build/'
        dest: 'root@176.58.122.97:/var/www/sites/avodocs/'
    - name: AvoDeploy
      if: ${{ false }}
      uses: Pendect/action-rsyncer@v2.0.0
      env:
        DEPLOY_KEY: ${{secrets.AVO_DEPLOY_KEY}}
      with:
        flags: '-avzr --delete'
        options: ''
        ssh_options: ''
        src: 'website/build/'
        dest: 'web@51.104.240.248:/var/www/html/manuals/titan/'
    - name: SbDeploy
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: 85.215.130.134
        protocol: ftps
        security: loose
        username: avosupport.de_uif9inez29
        password: ${{secrets.SB_DEPLOY_KEY}}
        local-dir: 'website/build/'
        server-dir: '/manual.avosupport.de/'

  download:
    name: Versions Page
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Wait for build to finish
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: pdf
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: build
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          timeoutSeconds: 1800

      - name: npm install & build
        run: |
          cd website/docusaurus-search-local
          yarn install --frozen-lockfile
          yarn build
          cd ../
          yarn install --frozen-lockfile
          yarn run download
          yarn run build

      - name: Deploy
        if: ${{ false }}
        uses: Pendect/action-rsyncer@v2.0.0
        env:
          DEPLOY_KEY: ${{secrets.DEPLOY_KEY}}
        with:
          flags: '-avzr --delete'
          options: ''
          ssh_options: ''
          src: 'website/build/'
          dest: 'root@176.58.122.97:/var/www/sites/avodocs/'

      - name: AvoDeploy
        if: ${{ false }}
        uses: Pendect/action-rsyncer@v2.0.0
        env:
          DEPLOY_KEY: ${{secrets.AVO_DEPLOY_KEY}}
        with:
          flags: '-avzr --delete'
          options: ''
          ssh_options: ''
          src: 'website/build/'
          dest: 'web@51.104.240.248:/var/www/html/manuals/titan/'
          
      - name: SbDeploy
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: 85.215.130.134
          protocol: ftps
          security: loose
          username: avosupport.de_uif9inez29
          password: ${{secrets.SB_DEPLOY_KEY}}
          local-dir: 'website/build/'
          server-dir: '/manual.avosupport.de/'
